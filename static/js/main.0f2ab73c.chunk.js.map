{"version":3,"sources":["components/toDoForm.jsx","components/toDo.jsx","components/toDoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["ToDoForm","state","input","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onSubmit","id","Math","floor","random","text","this","className","edit","type","placeholder","name","onChange","ref","focus","Component","ToDo","submitUpdate","updateTodo","todos","completeTodo","removeTodo","map","todo","index","isComplete","onClick","style","cursor","Object","assign","ToDoList","addTodo","test","newTodo","todoId","newValue","updated","console","log","removeArr","filter","updatedTodos","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f2ab73c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass ToDoForm extends Component {\r\n  state = {\r\n    input: [],\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    const input = e.target.value;\r\n    this.setState({ input });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    this.props.onSubmit({\r\n      id: Math.floor(Math.random() * 10000),\r\n      text: this.state.input,\r\n    });\r\n\r\n    this.setState({ input: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { input } = this.state;\r\n\r\n    return (\r\n      <form className=\"todo-form\" onSubmit={this.handleSubmit}>\r\n        {this.props.edit ? (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Update your item\"\r\n              value={input}\r\n              name=\"text\"\r\n              className=\"todo-input edit\"\r\n              onChange={this.handleChange}\r\n              ref={(input) => input && input.focus()}\r\n            />\r\n            <button className=\"todo-button edit\">Update</button>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Add a Task\"\r\n              value={input}\r\n              name=\"text\"\r\n              className=\"todo-input\"\r\n              onChange={this.handleChange}\r\n              ref={(input) => input && input.focus()}\r\n            />\r\n            <button className=\"todo-button\">Add Task</button>\r\n          </div>\r\n        )}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoForm;\r\n","import React, { Component } from \"react\";\r\nimport ToDoForm from \"./toDoForm\";\r\nimport { RiCloseCircleLine } from \"react-icons/ri\";\r\nimport { TiEdit } from \"react-icons/ti\";\r\n\r\nclass ToDo extends Component {\r\n  state = {\r\n    edit: { id: null, value: \"\" },\r\n  };\r\n\r\n  submitUpdate = (value) => {\r\n    this.props.updateTodo(this.state.edit.id, value);\r\n    const { edit } = this.state;\r\n    edit.value = \"\";\r\n    edit.id = null;\r\n    this.setState({ edit });\r\n  };\r\n\r\n  render() {\r\n    const { todos, completeTodo, removeTodo } = this.props;\r\n\r\n    const { edit } = this.state;\r\n\r\n    if (edit.id) {\r\n      return (\r\n        <div>\r\n          <ToDoForm edit={edit} onSubmit={this.submitUpdate} />\r\n        </div>\r\n      );\r\n    }\r\n    return todos.map((todo, index) => (\r\n      <div\r\n        className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\r\n        key={index}\r\n      >\r\n        <div key={todo.id} onClick={() => completeTodo(todo.id)}>\r\n          {todo.text}\r\n        </div>\r\n        <div className=\"icons\">\r\n          <RiCloseCircleLine\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => removeTodo(todo.id)}\r\n            className=\"delete-icon\"\r\n          />\r\n          <TiEdit\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() =>\r\n              this.setState(\r\n                Object.assign(this.state.edit, {\r\n                  id: todo.id,\r\n                  value: todo.text,\r\n                })\r\n              )\r\n            }\r\n            className=\"edit-icon\"\r\n          />\r\n        </div>\r\n      </div>\r\n    ));\r\n  }\r\n}\r\n\r\nexport default ToDo;\r\n","import React, { Component } from \"react\";\r\nimport ToDo from \"./toDo\";\r\nimport ToDoForm from \"./toDoForm\";\r\n\r\nclass ToDoList extends Component {\r\n  state = {\r\n    todos: [],\r\n  };\r\n\r\n  addTodo = (todo) => {\r\n    if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n      return;\r\n    }\r\n    const newTodo = [todo, ...this.state.todos];\r\n    this.setState({ todos: newTodo });\r\n  };\r\n\r\n  updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n\r\n    const { todos } = this.state;\r\n\r\n    const updated = todos.map((todo) => (todo.id === todoId ? newValue : todo));\r\n\r\n    this.setState({ todos: updated });\r\n    console.log(todos);\r\n  };\r\n\r\n  removeTodo = (id) => {\r\n    const removeArr = [...this.state.todos].filter((todo) => todo.id !== id);\r\n    this.setState({ todos: removeArr });\r\n  };\r\n\r\n  completeTodo = (id) => {\r\n    let updatedTodos = this.state.todos.map((todo) => {\r\n      if (todo.id === id) {\r\n        todo.isComplete = !todo.isComplete;\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container-fluid\" id=\"toDoList\">\r\n        <h2>What's the Plan for Today ?</h2>\r\n        <ToDoForm onSubmit={this.addTodo} />\r\n        <ToDo\r\n          todos={this.state.todos}\r\n          updateTodo={this.updateTodo}\r\n          completeTodo={this.completeTodo}\r\n          removeTodo={this.removeTodo}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoList;\r\n","import \"./App.css\";\nimport ToDoList from \"./components/toDoList\";\n\nfunction App() {\n  return <ToDoList />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}